#!/bin/bash

usage_info () {
	echo ""
	echo "Shortcut for common ffmpeg usages so I don't I have to keep looking them up"
	echo "Usage: ffnpeg [options] <command> [options] file ..."
	echo ""
	echo "Available Commands:"
	echo "segment		Splits media into segments of a given length"
	echo "split		Splits the media at the timestamp"
	echo "trim		Trims media to the given timestamps"
	echo "convert		Converts one or more files into a different format"
	echo "concat		Concats one or more videos"
	echo "extract		Extracts the audio or video from the video"
	echo "musicvid	Combines an audio file with a static image"
	echo ""
	echo "Universal Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
}

echo_universal_toggled_options () {
	echo "-d		deletes input file afterwards (use with caution!)"
	echo "-c		turn off -c copy (needed when converting between codecs)"
	echo "-y		overwrite output files without asking"
	echo "-p		runs ffmpeg on each file in parallel"
	echo "-q		turn on quiet mode"
}

echo_universal_filename_options () {
	echo "-l PATH		sets location of output file"
	echo "-n NAME		sets the output filename and extension"
	echo "-s SUFFIX	adds a suffix to the output filenames"
	echo "-e FORMAT	sets the output's extension. Will overwrite -n's extension"
}

#=================================
# Universal Optargs
#=================================

# ==== configs ====
output_location=''
output_file=''
output_suffix=''
output_extension=''

# usage: $(get_location)
get_location () {
	local location='./'
	if [ "$output_location" != "" ]; then location="$output_location"; fi
	echo "$location"
}

# usage: $(get_filename DEFAULT)
# will strip path from default name
get_filename () {
	local filename=$(basename "$1")
	if [ "$output_file" != "" ]; then filename="${output_file%.*}"; fi
	echo "$filename"
}

# usage: $(get_suffix DEFAULT)
get_suffix () {
	local suffix="$1"
	if [ "$output_suffix" != "" ]; then suffix="$output_suffix"; fi
	echo "$suffix"
}

# usage: $(get_filename DEFAULT_FILENAME DEFAULT_SUFFIX)
get_outname() {
	local location=$(get_location)
	local filename=$(get_filename "$1")
	local suffix=$(get_suffix "$2")
	echo "$location/$filename$suffix"
}

# usage: $(get_extension DEFAULT)
get_extension () {
	local extension="$1"
	if [ "$output_file" != "" ]; then extension="${output_file##*.}"; fi
	if [ "$output_extension" != "" ]; then extension="${output_extension}"; fi
	echo "$extension"
}

# ==== toggles ====
delete_after=false
y_overwrite=''
c_copy='-c copy'
is_parallel=false
q='-hide_banner'

toggle_delete_after () {
	delete_after=true
}

toggle_y_overwrite () {
	y_overwrite='-y'
}

toggle_c_copy () {
	c_copy=''
}

toggle_is_parallel () {
	is_parallel=true
}

toggle_is_quiet () {
	q='-hide_banner -v quiet -stats'
}


#=================================
# Specific Optargs
#=================================

# ==== used by trim and split ====
avoid_negative=''

toggle_avoid_negative () {
	avoid_negative='-avoid_negative_ts make_zero'
}

# ==== used by extract ====
extracted_audio_format=''
extracted_video_format=''

# ==== used by musicvid ====
output_scale=''

# usage: $(get_output_scale DEFAULT)
get_output_scale () {
	local scale="$1"
	if [ "$output_scale" != '' ]; then scale="$output_scale"; fi
	echo "$scale"
}


#=================================
# Main
#=================================

process_args () {
	if [ $# -lt 1 ]; then 
    	usage_info
    	exit 1
  	fi

	while [ $# -gt 0 ]; do
		local OPTIND=1
    	while getopts "hdcypql:n:s:e:ta:v:z:" option; do
    		case "${option}" in
    			h)
    				usage_info
    				exit 0;;
    			# ==== Universal Optargs ====
        		d) 
			 	 	toggle_delete_after ;;
				c)
					toggle_c_copy ;;
				y)
					toggle_y_overwrite ;;
				p)
				  	toggle_is_parallel ;;
				q)
			 	 	toggle_is_quiet ;;
				l)
			  		output_location="${OPTARG}" ;;
				n)
					output_file="${OPTARG}" ;;
				s)
			  		output_suffix="${OPTARG}" ;;
				e)
			  		output_extension="${OPTARG}" ;;

				# ==== Specific Optargs ====
					# used by trim + split
				t)	
					toggle_avoid_negative ;;

					# used by extract
				a)
			  		extracted_audio_format="${OPTARG}";;
				v)
			  		extracted_video_format="${OPTARG}";;

					# used by musicvid
				z)  
					output_scale="${OPTARG}" ;;

				\?)
			  		echo "Invalid argument: ${OPTARG}"
			  		exit 1 ;;
        	esac
    	done
    	shift $((OPTIND-1))

    	if [ $# -gt 0 ]; then args+=("$1"); fi
    	shift 1
    done

    select_command "${args[@]}"
}

select_command () {
	if [ $# -eq 0 ]; then 
		usage_info 
		exit 1 
	fi

	local command=${1}
	shift 1

	case ${command} in 
		segment) 
			segment_main "${@}" ;;
		split)
			split_main "${@}" ;;
      	trim)
      		trim_main "${@}" ;;
		convert)
      		convert_main "${@}" ;;
      	concat)
      		concat_main "${@}" ;;
      	extract)
      		extract_main "${@}" ;;
      	musicvid)
      		musicvid_main "${@}" ;;
      	*)
			echo "Invalid command: ${1}"
			exit 1
			;;
	esac
}

#=================================
# Segment
#=================================

segment_usage_info () {
	echo ""
	echo "Splits media into segments of a given length"
	echo "Usage: ffnpeg segment [OPTIONS] <segment length> file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
}

segment_main () {
    if [ $# -lt 2 ]; then
		segment_usage_info
		exit 1
	fi

	local segment_length=$1
	local input_files=("${@:2}")
	
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then segment_exec ${segment_length} "${i}" &
		else segment_exec ${segment_length} "${i}"; fi
	done
	wait
}

# $1 = segment length
# $2 = input file
segment_exec () {
	local outname=$(get_outname "${2%.*}" '')
	local extension=$(get_extension "${2##*.}")

	ffmpeg $q -i "${2}" -map 0 ${c_copy} ${y_overwrite} -f segment -segment_time ${1} \
	-reset_timestamps 1 "${outname}_%03d.${extension}" &&
	{ if [ "$delete_after" = true ]; then rm "${2}" ; fi; }
}

#=================================
# Split
#=================================

split_usage_info () {
	echo ""
	echo "Splits the media at the timestamp"
	echo "Usage:	ffnpeg split [OPTIONS] <file> <timestamp>"
	echo "or	ffnpeg split [OPTIONS] <timestamp> file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
	echo "-t		may cut to before the start time in order to avoid black screen"
}

# $1 = timestamp
split_main () {
    if [ $# -lt 2 ]; then
		split_usage_info
		exit 1
	fi

	# regex checks if first arg is a timestamp
    if [[ $1 =~ ^([0-9])+(:[0-9][0-9])*$ ]]; then
    	splitm_main "${@}"
    else
    	splits_main "${@}"
    fi
}

# split single
splits_main () {
	if [ $# -ne 2 ]; then
		split_usage_info
		exit 1
	fi

	splitm_main "${2}" "${1}"
}

# split multiple
splitm_main () {
	local timestamp="$1"
	local input_files=("${@:2}")
	
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then split_exec ${timestamp} "${i}" &
		else split_exec ${timestamp} "${i}"; fi
	done
	wait
}

# $1 = timestamp
# $2 = input file
split_exec () {
	local outname=$(get_outname "${2%.*}" '_SPLIT')
	local extension=$(get_extension "${2##*.}")

	local output="${outname}.${extension}"
	local output2="${outname}2.${extension}"
	local duration="$(ffprobe -v error -show_entries format=duration -of csv=p=0 $2)"

	ffmpeg $q -i "${2}" ${y_overwrite} -ss 0 -to "${1}" ${c_copy} ${avoid_negative} "${output}" &&
	ffmpeg $q -i "${2}" ${y_overwrite} -ss "${1}" -to "${duration}" ${c_copy} ${avoid_negative} "${output2}"
	{ if [ "$delete_after" = true ]; then rm "${2}" ; fi; }
}

#=================================
# Trim
#=================================

trim_usage_info () {
	echo ""
	echo "Trims media to the given timestamps"
	echo "Usage:	ffnpeg trim [OPTIONS] <file> <start> <end>"
	echo "or	ffnpeg trim [OPTIONS] <start> <end> file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
	echo "-t		may cut to before the start time in order to avoid black screen"
}

trim_main () {
    # invalid args
    if [ $# -lt 3 ]; then
		trim_usage_info
		exit 1
	fi

	# regex checks if first arg is a timestamp
    if [[ $1 =~ ^([0-9])+(:[0-9][0-9])*$ ]]; then
    	trimm_main "${@}"
    else
    	trims_main "${@}"
    fi
}

# trim single
trims_main () {
	if [ $# -ne 3 ]; then
		trim_usage_info
		exit 1
	fi

	trimm_main "${2}" "${3}" "${1}"
}

# trim multiple
trimm_main () {
	local start="$1"
	local end="$2"
	local input_files=("${@:3}")
	
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then trim_exec "${start}" "${end}" "${i}" &
		else trim_exec "${start}" "${end}" "${i}"; fi
	done
	wait
}

# $1 = start
# $2 = end
# $3 = input file
trim_exec () {
	local outname=$(get_outname "${3%.*}" '_TRIMMED')
	local extension=$(get_extension "${3##*.}")

	local output="${outname}.${extension}"

	ffmpeg $q -i "${3}" ${y_overwrite} -ss "${1}" -to "${2}" ${c_copy} ${avoid_negative} "${output}" &&
	{ if [ "$delete_after" = true ]; then rm "${3}" ; fi; }
}

#=================================
# Convert
#=================================

convert_usage_info () {
	echo ""
	echo "Converts one or more files into a different format."
	echo "Usage: ffnpeg convert [OPTIONS] file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
	echo "		Note: -n or -e is MANDATORY"
}

convert_main () {
	if [ $# -lt 1 ] || [ "$(get_extension '')" = '' ] ; then
		convert_usage_info
		exit 1
	fi

	local input_files=("${@:1}")
	
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then convert_exec "${i}" &
		else convert_exec "${i}"; fi
	done
	wait
}

# $1 = input file
convert_exec () {
	local outname=$(get_outname "${1%.*}" '')
	local extension=$(get_extension '')

	local output="${outname}.${extension}"
	ffmpeg $q -i "${1}" ${c_copy} ${y_overwrite} "${output}" &&
	{ if [ "$delete_after" = true ]; then rm "${1}" ; fi; }
}

#=================================
# Concat
#=================================

concat_usage_info () {
	echo ""
	echo "Concats one or more videos"
	echo "Usage: ffnpeg concat [OPTIONS] file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
}

concat_main () {
	if [ $# -lt 1 ]; then
		concat_usage_info
		exit 1
	fi

	concat_exec "${@}"
}

concat_exec () {
	local outname=$(get_outname "output" '')
	local extension=$(get_extension "${1##*.}")

	local output="${outname}.${extension}"

	local input_files=("${@}")

	ffmpeg $q -f concat -safe 0 ${y_overwrite} \
	 -i <(for f in "${input_files[@]}"; do echo "file '$PWD/$f'"; done) \
	 ${c_copy} "${output}" \
	 && { if [ "$delete_after" = true ]; then rm "${input_files[@]}" ; fi; }
}

#=================================
# Extract
#=================================

extract_usage_info () {
	echo ""
	echo "Extracts the audio or video from the video"
	echo "Usage: ffnpeg extract [OPTIONS] file ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo "-a FORMAT	audio format to extract to"
	echo "-v FORMAT	video format to extract to"
	echo "-s SUFFIX	adds a suffix to the output filenames"
}

extract_main () {
	if [ $# -lt 1 ]; then
		extract_usage_info
		exit 1
	fi

	local input_files=("${@}")
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then extract_exec "${i}" &
		else extract_exec "${i}"; fi
	done
	wait
}

get_ca_copy () {
	local ca_copy='-c:a copy'
	if [ "${c_copy}" = '' ]; then ca_copy=''; fi
	echo "$ca_copy"
}

get_cv_copy () {
	local cv_copy='-c:v copy'
	if [ "${c_copy}" = '' ]; then cv_copy=''; fi
	echo "$cv_copy"
}

# $1 = input file
extract_exec () {
	local a_outname=$(get_outname "${1%.*}" '')
	local v_outname=$(get_outname "${1%.*}" '_EXTRACTED')

	local ca_copy=$(get_ca_copy)
	local cv_copy=$(get_cv_copy)

	local a_success=true
	local v_success=true

	if [ "$extracted_audio_format" != '' ]; then 
		local output="${a_outname}.${extracted_audio_format}"
		ffmpeg $q -i "${1}" ${y_overwrite} ${ca_copy} -q:a 0 -map a "${output}" || 
		a_success=false
	fi

	if [ "$extracted_video_format" != '' ]; then 
		local output="${v_outname}.${extracted_video_format}"
		ffmpeg $q -i "${1}" ${y_overwrite} ${cv_copy} -q:v 0 -map v "${output}" || 
		v_success=false
	fi

	if [ "$a_success" = true ] && [ "$v_success" = true ]; then
		if [ "$delete_after" = true ]; then rm "${i}" ; fi; 
	fi
}

#=================================
# Musicvid
#=================================

musicvid_usage_info () {
	echo ""
	echo "Combines an audio file with a static image"
	echo "Usage: ffnpeg musicvid [OPTIONS] <image> files ..."
	echo ""
	echo "Options:"
	echo_universal_toggled_options
	echo_universal_filename_options
	echo "-z SCALE	sets the scale of the video (default 1280:720)"
}

musicvid_main () {
	if [ $# -lt 2 ]; then
		musicvid_usage_info
		exit 1
	fi

	local image="$1"

	local input_files=("${@:2}")
	for i in "${input_files[@]}"; do
		if [ "$is_parallel" = true ]; then musicvid_exec "$image" "${i}" &
		else musicvid_exec "$image" "${i}"; fi
	done
	wait
}

# $1 = image
# $2 = video
musicvid_exec () {
	musicvid_exec_inner "$image" "${i}" &&
	{ if [ "$delete_after" = true ]; then rm "${i}" ; fi; }
}

get_acodec_copy () {
	if [ "$c_copy" = '-c copy' ]; then
		echo '-c:a copy'
	else
		echo ''
	fi
}

# $1 = image
# $2 = audio
musicvid_exec_inner () {
	local outname=$(get_outname "${2%.*}" '')
	local extension=$(get_extension 'flv')

	local acodec_copy=$(get_acodec_copy)

	local output="${outname}.${extension}" 
	local scale=$(get_output_scale '1280:720')

	local duration=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "$2")

	ffmpeg $q -r 1 -loop 1 -i "$1" -i "$2" $acodec_copy -r 1 -shortest \
	-ss 0 -to "$duration" \
	-vf scale="$scale":force_original_aspect_ratio=1,pad="$scale":'(ow-iw)/2:(oh-ih)/2' \
	"$output"
}

#=================================
# Actual entrance point
#=================================

process_args "${@}"


